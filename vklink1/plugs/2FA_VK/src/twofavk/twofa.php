<?php

namespace twofavk;

use pocketmine\event\Listener;
use pocketmine\event\player\PlayerPreLoginEvent;
use pocketmine\plugin\PluginBase;
use pocketmine\Player;
use SQLite3;

class twofa extends PluginBase implements Listener {

    private $db;

    public function onEnable() {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        $this->db = new SQLite3('/root/vklink/vk_bot.db');

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        $this->getServer()->getPluginManager()->registerEvents($this, $this);
    }

    public function onPlayerPreLogin(PlayerPreLoginEvent $event) {
        $player = $event->getPlayer();
        $playerName = $player->getName();
        $playerIp = $player->getAddress(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π IP –∏–≥—Ä–æ–∫–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ 2FA –¥–ª—è –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ settings
        $stmtSettings = $this->db->prepare("SELECT twofa_active FROM settings WHERE nickname = :username");
        $stmtSettings->bindValue(':username', strtolower($playerName), SQLITE3_TEXT);
        $resultSettings = $stmtSettings->execute();

        if ($resultSettings) {
            $settingsData = $resultSettings->fetchArray(SQLITE3_ASSOC);
            $resultSettings->finalize(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
            
            // –ï—Å–ª–∏ active_twofa = 'NO', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA
            if ($settingsData && $settingsData['twofa_active'] === 'NO') {
                $this->getLogger()->info("2FA –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $playerName.");
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å link –∏ process
        $stmt = $this->db->prepare("SELECT vk_id, link, process, last_ip FROM vk_links WHERE username = :username");
        $stmt->bindValue(':username', strtolower($playerName), SQLITE3_TEXT);
        $result = $stmt->execute();

        if ($result) {
            $data = $result->fetchArray(SQLITE3_ASSOC);
            $result->finalize();  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞

            if ($data) {
                if ($data['link'] === 'NO') {
                    $this->getLogger()->info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $playerName –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –í–ö. 2FA –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.");
                    return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ link = NO
                }

                // –ï—Å–ª–∏ IP —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥ –±–µ–∑ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                if ($data['last_ip'] === $playerIp) {
                    return;
                }

                // –ï—Å–ª–∏ IP –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ –ø—Ä–æ—Ü–µ—Å—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                if ($data['process'] === 'pending') {
                    // –ö–∏–∫–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    $event->setKickMessage("\n¬ßl¬ß7[¬ßf2¬ßcFA¬ß7] ¬ßl¬ß7–í–∞—à ¬ßl¬ßfIP ¬ßl¬ßc–Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è ¬ßl¬ß7—Å —Ç–µ–º, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∑–∞—Ö–æ–¥–∏–ª–∏ —Ä–∞–Ω–µ–µ.");
                    $event->setCancelled(true);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'pending' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    $this->updateProcess($playerName, 'pending');

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –í–ö
                    $vkId = $data['vk_id'];
                    $this->sendVKConfirmationRequest($playerName, $vkId, $playerIp);

                } elseif ($data['process'] === 'denied') {
                    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞, –¥–æ–±–∞–≤–ª—è—è –µ–≥–æ –≤ –±–∞–Ω-–ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏
                    $this->getServer()->getNameBans()->addBan($playerName, "–í—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ IP –æ—Ç–∫–ª–æ–Ω–µ–Ω.", null, "2FA");
                    $event->setKickMessage("\n¬ßl¬ß7[¬ßf2¬ßcFA¬ßl¬ß7] ¬ßl¬ß7–í—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ ¬ßl¬ßfIP ¬ßl¬ß7–±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
                    $event->setCancelled(true);

                } elseif ($data['process'] === 'approved') {
                    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
                    $this->getServer()->getNameBans()->remove($playerName);

                    // –û–±–Ω–æ–≤–ª—è–µ–º IP-–∞–¥—Ä–µ—Å –∏–≥—Ä–æ–∫–∞
                    $this->updateLastIp($playerName, $playerIp);

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–µ process –≤ pending –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    $this->updateProcess($playerName, 'pending');
                }
            }
        }
    }

    private function updateLastIp(string $username, string $ip): void {
        $stmt = $this->db->prepare("UPDATE vk_links SET last_ip = :last_ip WHERE username = :username");
        $stmt->bindValue(':last_ip', $ip, SQLITE3_TEXT);
        $stmt->bindValue(':username', strtolower($username), SQLITE3_TEXT);
        $stmt->execute();
    }

    private function updateProcess(string $username, string $process): void {
        $stmt = $this->db->prepare("UPDATE vk_links SET process = :process WHERE username = :username");
        $stmt->bindValue(':process', $process, SQLITE3_TEXT);
        $stmt->bindValue(':username', strtolower($username), SQLITE3_TEXT);
        $stmt->execute();
    }

    private function sendVKConfirmationRequest(string $playerName, int $vkId, string $playerIp): void {
        $message = "üîë | $playerName, –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ IP ($playerIp).\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ (/–∞–∫–∫):\n1‚É£ –ø—Ä–∏–Ω—è—Ç—å - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥.\n2‚É£ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Ö–æ–¥ –∏ –±–ª–æ–∫–Ω—É—Ç—å –∞–∫–∫.\n3‚É£ —Ä–∞–∑–±–∞–Ω - –µ—Å–ª–∏ –≤—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω —ç—Ç–æ —Ä–∞–∑–±–ª–æ—á–∏—Ç –∞–∫–∫.\n\n‚ö†Ô∏è | –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ –∞–∫–∫ —Ç–æ –æ—Ç–∫–ª–æ–Ω–∏ –≤—Ö–æ–¥ –∏ –≤—Å–µ.";

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        $url = "https://api.vk.com/method/messages.send?" . http_build_query([
            'user_id' => $vkId,
            'message' => $message,
            'random_id' => rand(100000, 999999),
            'access_token' => 'vk1.a.PERsOvAjIp8B-dhoMNQJZFN57n7vRde2MRGwUYfM1TFSrlIhc0GpAX7OnCPE7FRMK0-2w18h7xFWWR5ACAYOEGCKiyLZIt8URVoryemQec_eGxrZM85O3YvYfNckAABBzRUMU6ag_VHMTAWiu6gRO8lAAD3wVvEmyeQg4H4yCXm4y1GdBfE1Agi3Ttc7HUw21jy5lHoJg',
            'v' => '5.131'
        ]);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º cURL —Å–µ—Å—Å–∏—é
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);

        $response = curl_exec($ch);

        if (curl_errno($ch)) {
            $this->getLogger()->error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –í–ö: " . curl_error($ch));
        } else {
            $this->getLogger()->info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é VK ID: $vkId");
        }

        curl_close($ch);
    }
}